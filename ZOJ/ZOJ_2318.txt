geometry, circles, dfs/radial sweep

https://github.com/osamahatem/CompetitiveProgramming/blob/master/ZOJ/2318%20-%20Get%20Out!.cpp
https://github.com/MedoN11/CompetitiveProgramming/blob/master/ZOJ/2318.cpp

geometry, graph, point inclusion, ray-casting	may be week test cases, because of self-intersecting polygons
	https://github.com/AbdelrahmanRamadan/competitive-programming/blob/master/ZOJ/Get-Out-2318.cpp
	
geometry, graph, point inclusion, winding numbers	used winding number algorithm instead of ray casting to handle self-intersecting polygons
	https://github.com/AbdelrahmanRamadan/competitive-programming/blob/master/ZOJ/Get-Out-2318-sol2.cpp
	
geometry, graph, angles, winding numbers	better algorithm O(N^2) calculate the cycle winding angle on the fly during the dfs
	https://github.com/AbdelrahmanRamadan/competitive-programming/blob/master/ZOJ/Get-Out-2318-sol3.cpp
	
geometry, graph, angles, winding numbers	optimiztion: instead of calculating the angles just kept track of the current winding number during the dfs
	https://github.com/AbdelrahmanRamadan/competitive-programming/blob/master/ZOJ/Get-Out-2318-sol4.cpp
